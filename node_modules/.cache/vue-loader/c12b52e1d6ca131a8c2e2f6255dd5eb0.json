{"remainingRequest":"/Users/kangcheng/Documents/dev/marijuana-legalization/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kangcheng/Documents/dev/marijuana-legalization/src/components/Comments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kangcheng/Documents/dev/marijuana-legalization/src/components/Comments.vue","mtime":1543013735398},{"path":"/Users/kangcheng/Documents/dev/marijuana-legalization/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kangcheng/Documents/dev/marijuana-legalization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kangcheng/Documents/dev/marijuana-legalization/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport firebase from 'firebase'\nimport Comment from './Comment.vue'\nimport ReplyBox from './ReplyBox.vue'\nimport { getComments } from '../data'\nimport emitter from '../emitter'\n\nexport default {\n  name: 'comments',\n  components: {\n    Comment,\n    ReplyBox,\n  },\n  props: ['user', 'savedData'],\n  data() {\n    const { nickname, id } = this.user\n\n    const comments = getComments()\n\n    if (this.savedData.replies) {\n      Object.keys(this.savedData.replies).forEach((replyId) => {\n        const reply = this.savedData.replies[replyId]\n        if (!reply.commentId && !reply.replyId) {\n          const content = Object.values(reply.content)[Object.values(reply.content).length - 1];\n\n          comments.push({\n            content,\n            id: replyId,\n            nickname,\n            uid: id,\n            like: 0,\n            dislike: 0,\n            type: 0,\n            byCurrentUser: true,\n          })\n        }\n      })\n    }\n\n    return {\n      comments,\n    }\n  },\n  mounted() {\n    emitter.on('post', ({ commentId, replyId, comment }) => {\n      if (commentId === undefined && replyId === undefined) {\n        const ref = `${this.user.id}/replies/`\n        const newKey = firebase.database().ref(ref).push().key\n        firebase.database().ref(ref + newKey).set({\n          content: {\n            [firebase.database().ref().child(ref).push().key]: comment.content,\n          },\n        }).then(() => {\n          this.comments.push({\n            ...comment,\n            id: newKey,\n          })\n          const scrollingElement = (document.scrollingElement || document.body)\n          scrollingElement.scrollTo({\n            top: scrollingElement.scrollHeight,\n            behavior: \"smooth\"\n          })\n        })\n      }\n    })\n  },\n}\n",{"version":3,"sources":["Comments.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Comments.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <section class=\"comments\">\n    <ReplyBox :user=\"user\" :main=\"true\"/>\n    <Comment v-for=\"comment in comments\" :key=\"comment.id\" :comment=\"comment\" :user=\"user\" :saved-data=\"savedData\"/>\n  </section>\n</template>\n\n<style scoped>\n.comments {\n  display: flex;\n  flex-direction: column;\n  margin-top: 16px;\n}\n</style>\n\n<script>\nimport firebase from 'firebase'\nimport Comment from './Comment.vue'\nimport ReplyBox from './ReplyBox.vue'\nimport { getComments } from '../data'\nimport emitter from '../emitter'\n\nexport default {\n  name: 'comments',\n  components: {\n    Comment,\n    ReplyBox,\n  },\n  props: ['user', 'savedData'],\n  data() {\n    const { nickname, id } = this.user\n\n    const comments = getComments()\n\n    if (this.savedData.replies) {\n      Object.keys(this.savedData.replies).forEach((replyId) => {\n        const reply = this.savedData.replies[replyId]\n        if (!reply.commentId && !reply.replyId) {\n          const content = Object.values(reply.content)[Object.values(reply.content).length - 1];\n\n          comments.push({\n            content,\n            id: replyId,\n            nickname,\n            uid: id,\n            like: 0,\n            dislike: 0,\n            type: 0,\n            byCurrentUser: true,\n          })\n        }\n      })\n    }\n\n    return {\n      comments,\n    }\n  },\n  mounted() {\n    emitter.on('post', ({ commentId, replyId, comment }) => {\n      if (commentId === undefined && replyId === undefined) {\n        const ref = `${this.user.id}/replies/`\n        const newKey = firebase.database().ref(ref).push().key\n        firebase.database().ref(ref + newKey).set({\n          content: {\n            [firebase.database().ref().child(ref).push().key]: comment.content,\n          },\n        }).then(() => {\n          this.comments.push({\n            ...comment,\n            id: newKey,\n          })\n          const scrollingElement = (document.scrollingElement || document.body)\n          scrollingElement.scrollTo({\n            top: scrollingElement.scrollHeight,\n            behavior: \"smooth\"\n          })\n        })\n      }\n    })\n  },\n}\n</script>\n"]}]}